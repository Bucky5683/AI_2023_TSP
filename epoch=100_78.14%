import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets

class CNN(nn.Module):
    def __init__(self, num_classes=10):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(128 * 4 * 4, 512)
        self.fc2 = nn.Linear(512, num_classes)
        self.dropout = nn.Dropout(0.5)
        self.relu = nn.ReLU()
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        x = self.conv1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        x = self.conv2(x)
        x = self.relu(x)
        x = self.maxpool(x)
        x = self.conv3(x)
        x = self.relu(x)
        x = self.maxpool(x)
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        return x

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=128, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=128, shuffle=False)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model = CNN().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

num_epochs = 100

for epoch in range(num_epochs):
    for images, labels in train_loader:
        images = images.to(device)
        labels = labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')

# 모델 평가
model.eval()
total_correct = 0
total_samples = 0 

with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)

        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total_samples += labels.size(0)
        total_correct += (predicted == labels).sum().item()

accuracy = 100 * total_correct / total_samples
print(f'Test Accuracy: {accuracy}%')
#Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz
#100%|██████████| 170498071/170498071 [00:05<00:00, 30741477.95it/s]
#Extracting ./data/cifar-10-python.tar.gz to ./data
#Files already downloaded and verified
#Epoch [1/100], Loss: 1.6461904048919678
#Epoch [2/100], Loss: 1.469573736190796
#Epoch [3/100], Loss: 1.075448751449585
#Epoch [4/100], Loss: 0.9834935069084167
#Epoch [5/100], Loss: 0.8665555715560913
#Epoch [6/100], Loss: 0.8874313235282898
#Epoch [7/100], Loss: 0.6446760892868042
#Epoch [8/100], Loss: 0.6136354207992554
#Epoch [9/100], Loss: 0.47280797362327576
#Epoch [10/100], Loss: 0.6783352494239807
#Epoch [11/100], Loss: 0.5448688268661499
#Epoch [12/100], Loss: 0.45378535985946655
#Epoch [13/100], Loss: 0.42320841550827026
#Epoch [14/100], Loss: 0.2882411777973175
#Epoch [15/100], Loss: 0.44441333413124084
#Epoch [16/100], Loss: 0.2627427577972412
#Epoch [17/100], Loss: 0.19878791272640228
#Epoch [18/100], Loss: 0.2287556380033493
#Epoch [19/100], Loss: 0.14539028704166412
#Epoch [20/100], Loss: 0.22053733468055725
#Epoch [21/100], Loss: 0.18109244108200073
#Epoch [22/100], Loss: 0.17613908648490906
#Epoch [23/100], Loss: 0.15447787940502167
#Epoch [24/100], Loss: 0.09126988798379898
#Epoch [25/100], Loss: 0.14636360108852386
#Epoch [26/100], Loss: 0.11806299537420273
#Epoch [27/100], Loss: 0.16895833611488342
#Epoch [28/100], Loss: 0.2746371626853943
#Epoch [29/100], Loss: 0.1904340237379074
#Epoch [30/100], Loss: 0.11255613714456558
#Epoch [31/100], Loss: 0.1880989372730255
#Epoch [32/100], Loss: 0.03914482146501541
#Epoch [33/100], Loss: 0.06251963973045349
#Epoch [34/100], Loss: 0.05828418582677841
#Epoch [35/100], Loss: 0.0670429915189743
#Epoch [36/100], Loss: 0.05435914918780327
#Epoch [37/100], Loss: 0.1488792598247528
#Epoch [38/100], Loss: 0.010870379395782948
#Epoch [39/100], Loss: 0.036528296768665314
#Epoch [40/100], Loss: 0.08694131672382355
#Epoch [41/100], Loss: 0.08128365874290466
#Epoch [42/100], Loss: 0.07237430661916733
#Epoch [43/100], Loss: 0.21076612174510956
#Epoch [44/100], Loss: 0.1164049357175827
#Epoch [45/100], Loss: 0.05579505115747452
#Epoch [46/100], Loss: 0.07048367708921432
#Epoch [47/100], Loss: 0.03502843528985977
#Epoch [48/100], Loss: 0.03892155736684799
#Epoch [49/100], Loss: 0.0496068075299263
#Epoch [50/100], Loss: 0.02082793042063713
#Epoch [51/100], Loss: 0.029634062200784683
#Epoch [52/100], Loss: 0.011160383932292461
#Epoch [53/100], Loss: 0.039310090243816376
#Epoch [54/100], Loss: 0.020433522760868073
#Epoch [55/100], Loss: 0.06562179327011108
#Epoch [56/100], Loss: 0.04754744842648506
#Epoch [57/100], Loss: 0.011696865782141685
#Epoch [58/100], Loss: 0.028836021199822426
#Epoch [59/100], Loss: 0.07722489535808563
#Epoch [60/100], Loss: 0.013927524909377098
#Epoch [61/100], Loss: 0.171865314245224
#Epoch [62/100], Loss: 0.015459815971553326
#Epoch [63/100], Loss: 0.04066977649927139
#Epoch [64/100], Loss: 0.05449113994836807
#Epoch [65/100], Loss: 0.034270014613866806
#Epoch [66/100], Loss: 0.025393152609467506
#Epoch [67/100], Loss: 0.03032582998275757
#Epoch [68/100], Loss: 0.041349541395902634
#Epoch [69/100], Loss: 0.024130042642354965
#Epoch [70/100], Loss: 0.01929529197514057
#Epoch [71/100], Loss: 0.011012238450348377
#Epoch [72/100], Loss: 0.079241082072258
#Epoch [73/100], Loss: 0.052277445793151855
#Epoch [74/100], Loss: 0.04196135699748993
#Epoch [75/100], Loss: 0.001267877989448607
#Epoch [76/100], Loss: 0.05449116975069046
#Epoch [77/100], Loss: 0.12601511180400848
#Epoch [78/100], Loss: 0.05967675894498825
#Epoch [79/100], Loss: 0.0428839847445488
#Epoch [80/100], Loss: 0.06866665184497833
#Epoch [81/100], Loss: 0.007072029169648886
#Epoch [82/100], Loss: 0.1351211667060852
#Epoch [83/100], Loss: 0.07917500287294388
#Epoch [84/100], Loss: 0.03065282478928566
#Epoch [85/100], Loss: 0.030681272968649864
#Epoch [86/100], Loss: 0.013368303887546062
#Epoch [87/100], Loss: 0.0012534244451671839
#Epoch [88/100], Loss: 0.03834903612732887
#Epoch [89/100], Loss: 0.015428140759468079
#Epoch [90/100], Loss: 0.039135973900556564
#Epoch [91/100], Loss: 0.010183645412325859
#Epoch [92/100], Loss: 0.01880781725049019
#Epoch [93/100], Loss: 0.010332902893424034
#Epoch [94/100], Loss: 0.005723403301090002
#Epoch [95/100], Loss: 0.03164815157651901
#Epoch [96/100], Loss: 0.13584916293621063
#Epoch [97/100], Loss: 0.03276848793029785
#Epoch [98/100], Loss: 0.0015353774651885033
#Epoch [99/100], Loss: 0.015241590328514576
#Epoch [100/100], Loss: 0.11127591133117676
#Test Accuracy: 78.14%
